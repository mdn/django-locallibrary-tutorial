# Generated by Django 2.1.5 on 2020-11-29 09:03

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_datetime', models.DateTimeField(blank=True, null=True)),
                ('updated_datetime', models.DateTimeField(blank=True, null=True)),
                ('date_frame_from_weekday', models.DateField(blank=True, null=True)),
                ('date_frame_to_weekday', models.DateField(blank=True, null=True)),
                ('phase_week_target_is_excluded_from_wt_mp_assignment_until', models.DateField(blank=True, null=True)),
                ('phase_week_target_is_excluded_from_wt_mp_assignment_cause', models.CharField(default='', max_length=255)),
                ('phase_week_target_is_excluded_from_wt_mp_assignment_wish', models.CharField(default='', max_length=255)),
                ('is_not_during_working_hours', models.IntegerField(default=None, null=True)),
                ('week_target_manual_sorting_category_indistinguishable', models.CharField(default='', max_length=255)),
                ('recurrence_period_weeks', models.IntegerField(default=None, null=True)),
                ('due_datetime', models.DateTimeField(blank=True, null=True)),
                ('is_done_datetime', models.DateTimeField(blank=True, null=True)),
                ('workpackages_relevantinformation_is_separate_memory_palace', models.IntegerField(default=None, null=True)),
                ('memorization_sequence', models.IntegerField(default=None, null=True)),
                ('memorization_sequence_is_fixed_because_memorized', models.IntegerField(default=None, null=True)),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('date_of_death', models.DateField(blank=True, null=True, verbose_name='died')),
                ('memorizable_week_target', models.CharField(default='', max_length=4000)),
                ('week_target_comment', models.CharField(default='', max_length=4000)),
            ],
            options={
                'verbose_name': 'T_Week_Target',
                'db_table': 't_week_target',
                'ordering': ['created_datetime'],
            },
        ),
        migrations.CreateModel(
            name='Book',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_datetime', models.DateTimeField(blank=True, null=True)),
                ('updated_datetime', models.DateTimeField(blank=True, null=True)),
                ('associated_email_subject', models.CharField(default='', max_length=1000, null=True)),
                ('associated_email_received_datetime', models.DateTimeField(blank=True, null=True)),
                ('associated_email_received_account', models.CharField(default='', max_length=1000)),
                ('filepath_for_readiness_enhancement', models.CharField(default='', max_length=2000)),
                ('hyperlink_for_readiness_enhancement', models.CharField(default='', max_length=2000)),
                ('is_shown_at_next_time_measurement_stop', models.IntegerField(default=None, null=True)),
                ('plan_duration_mins', models.IntegerField(default=None, null=True)),
                ('due_datetime', models.DateTimeField(blank=True, null=True)),
                ('datetime_is_done', models.DateTimeField(blank=True, null=True)),
                ('title', models.CharField(max_length=200)),
                ('summary', models.TextField(help_text='Enter a brief description of the book', max_length=1000)),
                ('isbn', models.CharField(help_text='13 Character <a href="https://www.isbn-international.org/content/what-isbn">ISBN number</a>', max_length=13, verbose_name='ISBN')),
                ('author', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.Author')),
            ],
            options={
                'verbose_name': 'T_Workpackage',
                'db_table': 't_workpackage',
                'ordering': ['created_datetime'],
            },
        ),
        migrations.CreateModel(
            name='BookInstance',
            fields=[
                ('id_asinteger', models.IntegerField(default=None, primary_key=True, serialize=False)),
                ('id', models.UUIDField(default=uuid.uuid4, help_text='Unique ID for this particular book across whole library')),
                ('created_datetime', models.DateTimeField(blank=True, null=True)),
                ('updated_datetime', models.DateTimeField(blank=True, null=True)),
                ('target_group_question', models.CharField(default='', max_length=1000)),
                ('memorizable_workpackage_relevantinformation_tobememorized', models.CharField(default='', max_length=1000)),
                ('relevantinformation_comment', models.CharField(default='', max_length=2000)),
                ('memorization_sequence', models.IntegerField(default=None, null=True)),
                ('memorization_sequence_is_fixed_because_memorized', models.IntegerField(default=None, null=True)),
                ('is_workpackage', models.IntegerField(default=None, null=True)),
                ('imprint', models.CharField(max_length=200)),
                ('due_back', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(blank=True, choices=[('d', 'Maintenance'), ('o', 'On loan'), ('a', 'Available'), ('r', 'Reserved')], default='d', help_text='Book availability', max_length=1)),
                ('book', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.Book')),
                ('borrower', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'T_Workpackage_Relevantinformation_Tobememorized',
                'db_table': 't_workpackage_relevantinformation_tobememorized',
                'ordering': ['due_back'],
                'permissions': (('can_mark_returned', 'Set book as returned'),),
            },
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter a book genre (e.g. Science Fiction, French Poetry etc.)', max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='Language',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Enter the book's natural language (e.g. English, French, Japanese etc.)", max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='T_Ausatemmuskulatur_Isnot_Entspannt_Dueto_Strategyrefinemt',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_datetime', models.DateTimeField(blank=True, null=True)),
                ('memorized_unit_is_gone_through_mentally', models.IntegerField(default=None, null=True)),
                ('memory_palace_is_enhanced_or_complete', models.IntegerField(default=None, null=True)),
            ],
            options={
                'db_table': 't_ausatemmuskulatur_isnot_entspannt_dueto_strategyrefinemt',
                'ordering': ['created_datetime'],
            },
        ),
        migrations.CreateModel(
            name='T_Ausatemmuskulatur_Strategyrefinement_Conflict_Phase',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('conflict_phase_name', models.CharField(default='', max_length=255)),
            ],
            options={
                'db_table': 't_ausatemmuskulatur_strategyrefinement_conflict_phase',
                'ordering': ['conflict_phase_name'],
            },
        ),
        migrations.CreateModel(
            name='T_Calendar',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_datetime', models.DateTimeField(blank=True, null=True)),
                ('updated_datetime', models.DateTimeField(blank=True, null=True)),
                ('datetime_start', models.DateTimeField(blank=True, null=True)),
                ('datetime_end', models.DateTimeField(blank=True, null=True)),
                ('subject_description', models.CharField(default='', max_length=1000)),
                ('location_description', models.CharField(default='', max_length=1000)),
                ('series_frequency_in_days', models.IntegerField(default=None, null=True)),
                ('is_hypothetic_conflict_appointment', models.IntegerField(default=None, null=True)),
                ('hypothetic_conflict_appointment_association_description', models.CharField(default='', max_length=255)),
            ],
            options={
                'db_table': 't_calendar',
            },
        ),
        migrations.CreateModel(
            name='T_Category_Table',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category_table_name', models.CharField(default='', max_length=255)),
            ],
            options={
                'db_table': 't_category_table',
                'ordering': ['category_table_name'],
            },
        ),
        migrations.CreateModel(
            name='T_Category_Table_Entry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category_name', models.CharField(default='', max_length=255)),
                ('t_category_table', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.T_Category_Table')),
            ],
            options={
                'db_table': 't_category_table_entry',
                'ordering': ['category_name'],
            },
        ),
        migrations.CreateModel(
            name='T_Category_Table_Predicate_Asverb',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('predicate_asverb', models.CharField(default='', max_length=255)),
                ('t_category_table_object', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='T_Category_Table_Related_Name', to='catalog.T_Category_Table')),
                ('t_category_table_subject', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.T_Category_Table')),
            ],
            options={
                'db_table': 't_category_table_predicate_asverb',
                'ordering': ['predicate_asverb'],
            },
        ),
        migrations.CreateModel(
            name='T_Category_Timeseries',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_datetime', models.DateTimeField(blank=True, null=True)),
                ('t_calendar', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.T_Calendar')),
                ('t_category_table', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.T_Category_Table')),
                ('t_category_table_entry', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.T_Category_Table_Entry')),
            ],
            options={
                'db_table': 't_category_timeseries',
                'ordering': ['created_datetime'],
            },
        ),
        migrations.CreateModel(
            name='T_Conflict',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('general_conflict_konfliktgegenstand_titel', models.CharField(default='', max_length=255)),
                ('general_conflict_konfliktgegenstand_mein_ziel_description', models.CharField(default='', max_length=255)),
                ('priorization_conflict_workpackage_one', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.Book')),
                ('priorization_conflict_workpackage_two', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Book_Related_Name2', to='catalog.Book')),
            ],
            options={
                'db_table': 't_conflict',
            },
        ),
        migrations.CreateModel(
            name='T_Conflict_Strategy_Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('conflict_strategy_category_verb', models.CharField(default='', max_length=255)),
                ('conflict_strategy_category_mywish', models.CharField(default='', max_length=255)),
            ],
            options={
                'db_table': 't_conflict_strategy_category',
                'ordering': ['conflict_strategy_category_verb'],
            },
        ),
        migrations.CreateModel(
            name='T_Conflict_Strategy_Category_Measure',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_datetime', models.DateTimeField(blank=True, null=True)),
                ('updated_datetime', models.DateTimeField(blank=True, null=True)),
                ('conflict_strategy_category_measure_description', models.CharField(default='', max_length=255)),
                ('memorization_sequence', models.IntegerField(default=None, null=True)),
                ('memorization_sequence_is_fixed_because_memorized', models.IntegerField(default=None, null=True)),
                ('t_conflict_strategy_category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.T_Conflict_Strategy_Category')),
            ],
            options={
                'db_table': 't_conflict_strategy_category_measure',
                'ordering': ['conflict_strategy_category_measure_description'],
            },
        ),
        migrations.CreateModel(
            name='T_Day_Target_Sequence_Timeseries',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_datetime', models.DateTimeField(blank=True, null=True)),
                ('sequence_proposed_for_day_target_memory_palace', models.IntegerField(default=None, null=True)),
                ('sequence_memorized_in_day_target_memory_palace', models.IntegerField(default=None, null=True)),
            ],
            options={
                'db_table': 't_day_target_sequence_timeseries',
                'ordering': ['created_datetime'],
            },
        ),
        migrations.CreateModel(
            name='T_Information_Item_Tobeoperationalized',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_datetime', models.DateTimeField(blank=True, null=True)),
                ('updated_datetime', models.DateTimeField(blank=True, null=True)),
                ('target_group_question', models.CharField(default='', max_length=1000)),
                ('memorizable_information_item_tobeoperationalized', models.CharField(default='', max_length=1000)),
                ('memorization_sequence_memory_cards_technique', models.IntegerField(default=None, null=True)),
                ('memorization_sequence_memory_palace_technique', models.IntegerField(default=None, null=True)),
                ('memorization_sequence_mem_pal_tec_is_fixed_because_memorized', models.IntegerField(default=None, null=True)),
                ('is_information_item_tobeoperationalized', models.IntegerField(default=None, null=True)),
            ],
            options={
                'db_table': 't_information_item_tobeoperationalized',
            },
        ),
        migrations.CreateModel(
            name='T_Information_Item_Tobeoperationalized_Memor_Timeseries',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_datetime', models.DateTimeField(blank=True, null=True)),
                ('t_information_item_tobeoperationalized', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.T_Information_Item_Tobeoperationalized')),
            ],
            options={
                'db_table': 't_information_item_tobeoperationalized_memor_timeseries',
                'ordering': ['action_datetime'],
            },
        ),
        migrations.CreateModel(
            name='T_Information_Item_Tobeoperationalized_Memor_Timeseries_Act',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_description', models.CharField(default='', max_length=255)),
            ],
            options={
                'db_table': 't_information_item_tobeoperationalized_memor_timeseries_act',
                'ordering': ['action_description'],
            },
        ),
        migrations.CreateModel(
            name='T_Memorization_Package_Memory_Palace_Or_Cards_Technique',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_datetime', models.DateTimeField(blank=True, null=True)),
                ('updated_datetime', models.DateTimeField(blank=True, null=True)),
                ('memorization_package_title', models.CharField(default='', max_length=255)),
                ('memorization_package_is_active', models.IntegerField(default=None, null=True)),
                ('is_mpt_t_week_target', models.IntegerField(default=None, null=True)),
                ('is_mpt_t_workpackage_relevantinformation_tobememorized', models.IntegerField(default=None, null=True)),
                ('is_mpt_t_conflict_strategy_category_measure', models.IntegerField(default=None, null=True)),
                ('is_mpt_t_information_item_tobeoperationalized', models.IntegerField(default=None, null=True)),
                ('is_mct_t_information_item_tobeoperationalized', models.IntegerField(default=None, null=True)),
            ],
            options={
                'db_table': 't_memorization_package_memory_palace_or_cards_technique',
                'ordering': ['memorization_package_title'],
            },
        ),
        migrations.CreateModel(
            name='T_Memory_Palace_Or_Cards_Memorization_Timeseries',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('t_memorization_package_memory_palace_or_cards_technique_snap', models.IntegerField(default=None, null=True)),
                ('t_memory_palace_type_location_number_snap', models.IntegerField(default=None, null=True)),
                ('action_datetime', models.DateTimeField(blank=True, null=True)),
                ('t_calendar', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.T_Calendar')),
                ('t_conflict_strategy_category_measure', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.T_Conflict_Strategy_Category_Measure')),
                ('t_information_item_tobeoperationalized', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.T_Information_Item_Tobeoperationalized')),
            ],
            options={
                'db_table': 't_memory_palace_or_cards_memorization_timeseries',
                'ordering': ['action_datetime'],
            },
        ),
        migrations.CreateModel(
            name='T_Memory_Palace_Or_Cards_Memorization_Timeseries_Action',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_description', models.CharField(default='', max_length=255)),
            ],
            options={
                'db_table': 't_memory_palace_or_cards_memorization_timeseries_action',
                'ordering': ['action_description'],
            },
        ),
        migrations.CreateModel(
            name='T_Memory_Palace_Type',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('memory_palace_type', models.CharField(default='', max_length=255)),
            ],
            options={
                'db_table': 't_memory_palace_type',
                'ordering': ['memory_palace_type'],
            },
        ),
        migrations.CreateModel(
            name='T_Memory_Palace_Type_Location',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sequence_proposed_for_new_memorization_package', models.IntegerField(default=None, null=True)),
                ('memory_palace_type_location', models.CharField(default='', max_length=255)),
                ('memory_palace_type_location_is_inactive', models.IntegerField(default=None, null=True)),
                ('t_memorization_package_memory_palace_or_cards_technique', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.T_Memorization_Package_Memory_Palace_Or_Cards_Technique')),
                ('t_memory_palace_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.T_Memory_Palace_Type')),
            ],
            options={
                'db_table': 't_memory_palace_type_location',
                'ordering': ['memory_palace_type_location'],
            },
        ),
        migrations.CreateModel(
            name='T_Memory_Palace_Type_Location_Daytime',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('memory_palace_daytime', models.DateTimeField(blank=True, null=True)),
                ('memory_palace_daytime_datapoint_description', models.CharField(default='', max_length=255)),
                ('t_memory_palace_type_location', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.T_Memory_Palace_Type_Location')),
            ],
            options={
                'db_table': 't_memory_palace_type_location_daytime',
                'ordering': ['memory_palace_daytime'],
            },
        ),
        migrations.CreateModel(
            name='T_Memory_Palace_Type_Location_Number',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('memory_palace_number', models.IntegerField(default=None, null=True)),
                ('memory_palace_datapoint_description', models.CharField(default='', max_length=255)),
                ('memory_palace_datapoint_lastuse_date', models.DateTimeField(blank=True, null=True)),
                ('memory_palace_datapoint_is_inactive', models.IntegerField(default=None, null=True)),
                ('t_memory_palace_type_location', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.T_Memory_Palace_Type_Location')),
            ],
            options={
                'db_table': 't_memory_palace_type_location_number',
                'ordering': ['memory_palace_number'],
            },
        ),
        migrations.CreateModel(
            name='T_Memory_Palace_Type_Location_Packageassignment_Timeseries',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assignment_to_memorization_package_datetime', models.DateTimeField(blank=True, null=True)),
                ('t_memorization_package_memory_palace_or_cards_technique', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.T_Memorization_Package_Memory_Palace_Or_Cards_Technique')),
                ('t_memory_palace_type_location', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.T_Memory_Palace_Type_Location')),
            ],
            options={
                'db_table': 't_memory_palace_type_location_packageassignment_timeseries',
                'ordering': ['assignment_to_memorization_package_datetime'],
            },
        ),
        migrations.CreateModel(
            name='T_Workpackage_Actual_Duration_Timeseries',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('measurement_datetime', models.DateTimeField(blank=True, null=True)),
                ('measurement_type_start_or_stop', models.CharField(default='', max_length=255)),
                ('t_workpackage', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.Book')),
            ],
            options={
                'db_table': 't_workpackage_actual_duration_timeseries',
                'ordering': ['measurement_datetime'],
            },
        ),
        migrations.CreateModel(
            name='T_Wt_Is_Excluded_From_Dt_Mp_Assignment_On_Weekday_Timeseries',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_datetime', models.DateTimeField(blank=True, null=True)),
                ('week_target_isnot_potential_day_target_on_weekday_date', models.DateField(blank=True, null=True)),
                ('t_week_target', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.Author')),
            ],
            options={
                'db_table': 't_wt_is_excluded_from_dt_mp_assignment_on_weekday_timeseries',
                'ordering': ['created_datetime'],
            },
        ),
        migrations.AddField(
            model_name='t_memory_palace_or_cards_memorization_timeseries',
            name='t_memory_palace_or_cards_memorization_timeseries_action',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.T_Memory_Palace_Or_Cards_Memorization_Timeseries_Action'),
        ),
        migrations.AddField(
            model_name='t_memory_palace_or_cards_memorization_timeseries',
            name='t_week_target',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.Author'),
        ),
        migrations.AddField(
            model_name='t_memory_palace_or_cards_memorization_timeseries',
            name='t_workpackage_relevantinformation_tobememorized',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.BookInstance'),
        ),
        migrations.AddField(
            model_name='t_memorization_package_memory_palace_or_cards_technique',
            name='t_memory_palace_type',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.T_Memory_Palace_Type'),
        ),
        migrations.AddField(
            model_name='t_information_item_tobeoperationalized_memor_timeseries',
            name='t_information_item_tobeoperationalized_memor_timeseries_act',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.T_Information_Item_Tobeoperationalized_Memor_Timeseries_Act'),
        ),
        migrations.AddField(
            model_name='t_information_item_tobeoperationalized',
            name='t_memorization_package_memory_palace_or_cards_technique',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.T_Memorization_Package_Memory_Palace_Or_Cards_Technique'),
        ),
        migrations.AddField(
            model_name='t_information_item_tobeoperationalized',
            name='t_memory_palace_type_location_number',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.T_Memory_Palace_Type_Location_Number'),
        ),
        migrations.AddField(
            model_name='t_day_target_sequence_timeseries',
            name='t_memorization_package_memory_palace_or_cards_technique',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.T_Memorization_Package_Memory_Palace_Or_Cards_Technique'),
        ),
        migrations.AddField(
            model_name='t_day_target_sequence_timeseries',
            name='t_memory_palace_type_location_number',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.T_Memory_Palace_Type_Location_Number'),
        ),
        migrations.AddField(
            model_name='t_day_target_sequence_timeseries',
            name='t_week_target',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.Author'),
        ),
        migrations.AddField(
            model_name='t_conflict_strategy_category_measure',
            name='t_memorization_package_memory_palace_or_cards_technique_fk5',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.T_Memorization_Package_Memory_Palace_Or_Cards_Technique'),
        ),
        migrations.AddField(
            model_name='t_conflict_strategy_category_measure',
            name='t_memory_palace_type_location_number',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.T_Memory_Palace_Type_Location_Number'),
        ),
        migrations.AddField(
            model_name='t_category_timeseries',
            name='t_conflict',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.T_Conflict'),
        ),
        migrations.AddField(
            model_name='t_category_timeseries',
            name='t_information_item_tobeoperationalized',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.T_Information_Item_Tobeoperationalized'),
        ),
        migrations.AddField(
            model_name='t_category_timeseries',
            name='t_week_target',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.Author'),
        ),
        migrations.AddField(
            model_name='t_category_timeseries',
            name='t_workpackage',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.Book'),
        ),
        migrations.AddField(
            model_name='t_calendar',
            name='t_conflict',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.T_Conflict'),
        ),
        migrations.AddField(
            model_name='t_calendar',
            name='t_memorization_package_memory_palace_or_cards_technique_fk4',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.T_Memorization_Package_Memory_Palace_Or_Cards_Technique'),
        ),
        migrations.AddField(
            model_name='t_calendar',
            name='t_memory_palace_type_location_daytime',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.T_Memory_Palace_Type_Location_Daytime'),
        ),
        migrations.AddField(
            model_name='t_calendar',
            name='t_workpackage',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Book_Related_Name', to='catalog.Book'),
        ),
        migrations.AddField(
            model_name='t_ausatemmuskulatur_isnot_entspannt_dueto_strategyrefinemt',
            name='t_ausatemmuskulatur_strategyrefinement_conflict_phase',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.T_Ausatemmuskulatur_Strategyrefinement_Conflict_Phase'),
        ),
        migrations.AddField(
            model_name='t_ausatemmuskulatur_isnot_entspannt_dueto_strategyrefinemt',
            name='t_calendar',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.T_Calendar'),
        ),
        migrations.AddField(
            model_name='t_ausatemmuskulatur_isnot_entspannt_dueto_strategyrefinemt',
            name='t_conflict',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.T_Conflict'),
        ),
        migrations.AddField(
            model_name='bookinstance',
            name='t_information_item_tobeoperationalized',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.T_Information_Item_Tobeoperationalized'),
        ),
        migrations.AddField(
            model_name='bookinstance',
            name='t_memorization_package_memory_palace_or_cards_technique_fk2',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.T_Memorization_Package_Memory_Palace_Or_Cards_Technique'),
        ),
        migrations.AddField(
            model_name='bookinstance',
            name='t_memory_palace_type_location_number',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.T_Memory_Palace_Type_Location_Number'),
        ),
        migrations.AddField(
            model_name='book',
            name='genre',
            field=models.ManyToManyField(help_text='Select a genre for this book', to='catalog.Genre'),
        ),
        migrations.AddField(
            model_name='book',
            name='language',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.Language'),
        ),
        migrations.AddField(
            model_name='book',
            name='t_calendar',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.T_Calendar'),
        ),
        migrations.AddField(
            model_name='author',
            name='t_memorization_package_memory_palace_or_cards_technique_fk',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.T_Memorization_Package_Memory_Palace_Or_Cards_Technique'),
        ),
        migrations.AddField(
            model_name='author',
            name='t_memory_palace_type_location_number',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.T_Memory_Palace_Type_Location_Number'),
        ),
    ]
